################################################################################
#
# RevBayes Example: Testing hidden rates for state-dependent OU model
#
# authors: Priscilla Lau
#
################################################################################

#######################
# Reading in the Data #
#######################

### Select the character to analyze
characterDisc <- 1
characterCont <- 1

### Read in the tree
tree <- readTrees("data/artiodactyla.tree")[1]
ntips <- tree.ntips()
nbranches <- 2 * ntips - 2

disc <- readDiscreteCharacterData("data/artiodactyla_Discrete.nex")

disc.excludeAll()
disc.includeCharacter(characterDisc)
num_disc_states <- disc.getStateDescriptions().size()

cont <- readContinuousCharacterData("data/artiodactyla_Continuous.nex")
cont.excludeAll()
cont.includeCharacter(characterCont)

# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()
avmvn_disc = mvAVMVN(weight=20, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_cont = mvAVMVN(weight=50, waitBeforeLearning=500, waitBeforeUsing=1000)

########################################
# Specify the discrete-character model #
########################################

# make the Q matrix
lambda ~ dnLognormal(ln(0.05), 0.4)
moves.append( mvScale(lambda, weight=1.0) )
avmvn_disc.addVariable( lambda )

rates ~ dnDirichlet(rep(1, num_disc_states*(num_disc_states-1))*10)
moves.append( mvBetaSimplex( rates, weight=2 ) )
moves.append( mvDirichletSimplex( rates, weight=2 ) )
avmvn_disc.addVariable( rates )

Q := fnFreeK(rates*lambda, rescaled=FALSE)



rf_prior <- rep(1,num_disc_states)
rf ~ dnDirichlet( rf_prior )
moves.append( mvBetaSimplex( rf, weight=2 ) )
moves.append( mvDirichletSimplex( rf, weight=2 ) )
avmvn_disc.addVariable( rf )
moves.append( avmvn_disc )

moves.append( avmvn_disc )

X ~ dnPhyloCTMCDASiteIID(tree, Q, branchRates=1, type="Standard", rootFrequencies=rf, nSites=1)
X.clamp(disc)

# include proposals for the discrete character history
moves.append( mvCharacterHistory(ctmc=X, qmap_site=Q, graph="node",   proposal="rejection", weight=200.0) )
moves.append( mvCharacterHistory(ctmc=X, qmap_site=Q, graph="branch", proposal="rejection", weight=100.0) )

# keep track of the number of transitions
for(i in 1:nbranches) {
    num_changes[i] := sum(X.numCharacterChanges(i))
}
total_num_changes := sum(num_changes)

char_hist := X.characterHistories()

##############################
# continuous character model #
##############################


root_age <- tree.rootAge()

min <- 3
max <- 7

#buffer <- cont.maxDifference(characterCont) / 3
buffer <- 2
Vy <- cont.var(characterCont)


for (i in 1:num_disc_states){
  theta[i] ~ dnUniform(min-buffer, max+buffer)
  moves.append(mvSlide(theta[i], weight = 1.0) )
  avmvn_cont.addVariable(theta[i])

  a <- ln(2)/root_age

  alpha[i] ~ dnLognormal(ln(a), 0.587405)
  moves.append(mvScale(alpha[i], weight = 1.0) )
  avmvn_cont.addVariable(alpha[i])

  sigma2[i] ~ dnLognormal(ln(Vy), 0.587405)
  moves.append(mvScale(sigma2[i], weight = 1.0) )
  avmvn_cont.addVariable(sigma2[i])

}


moves.append( avmvn_cont )

##########################
# Specify the OU process #
##########################

Y ~ dnPhyloOUSD(char_hist, theta=theta, rootTreatment="optimum", alpha=alpha, sigma=sigma2^0.5)
Y.clamp(cont)

#############
# The Model #
#############

mymodel = model(Y)

monitors.append( mnModel(filename="output/joint_SDOU/trace.log", printgen=10) )
monitors.append( mnScreen(printgen=100) )
monitors.append( mnFile( char_hist, filename="output/joint_SDOU/charhist.log", printgen=10 ) )


################
# The Analysis #
################

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves, nruns=2, combine="mixed")


### run the MCMC ###
mymcmc.burnin(generations=5000, tuningInterval=100) # comment out after first run

#mymcmc.initializeFromCheckpoint("output/joint_SDOU/checkpoint.state") #comment this out for the first run
mymcmc.run(generations=50000, tuningInterval=200, checkpointInterval=10, checkpointFile="output/joint_SDOU/checkpoint.state")
mymcmc.operatorSummary()

## quit ##
q()
