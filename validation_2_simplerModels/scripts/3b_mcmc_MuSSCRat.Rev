################################################################################
#
# RevBayes Example: Bayesian inference of rates of evolution under a
#                   state-dependent Brownian-motion model
#
#
# authors: Sebastian Hoehna
#
################################################################################

#######################
# Reading in the Data #
#######################

### Select the character to analyze
characterCont <- 1
characterDisc <- 1

### Read in the tree
tree <- readTrees("data/artiodactyla_rescaled.tree")[1]
ntips <- tree.ntips()
nbranches <- 2 * ntips - 2
root_age <- tree.rootAge()

### Read in the continuous-character data
cont <- readContinuousCharacterData("data/artiodactyla_Continuous.nex")
cont.excludeAll()
cont.includeCharacter(characterCont)

disc <- readDiscreteCharacterData("data/artiodactyla_Discrete.nex")
num_disc_states <- disc.getStateDescriptions().size()
disc.excludeAll()
disc.includeCharacter(characterDisc)


# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()
avmvn_disc = mvAVMVN(weight=20, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_cont = mvAVMVN(weight=20, waitBeforeLearning=500, waitBeforeUsing=1000)


########################################
# Specify the discrete-character model #
########################################

# make the Q matrix
lambda ~ dnLognormal(ln(0.05), 0.4)
moves.append( mvScale(lambda, weight=1.0) )
avmvn_disc.addVariable( lambda )

rates ~ dnDirichlet(rep(1, num_disc_states*(num_disc_states-1))*10)
moves.append( mvBetaSimplex( rates, weight=2 ) )
moves.append( mvDirichletSimplex( rates, weight=2 ) )
avmvn_disc.addVariable( rates )

Q := fnFreeK(rates*lambda, rescaled=FALSE)



rf_prior <- rep(1,num_disc_states)
rf ~ dnDirichlet( rf_prior )
moves.append( mvBetaSimplex( rf, weight=2 ) )
moves.append( mvDirichletSimplex( rf, weight=2 ) )
avmvn_disc.addVariable( rf )
moves.append( avmvn_disc )

moves.append( avmvn_disc )

X ~ dnPhyloCTMCDASiteIID(tree, Q, branchRates=1, type="Standard", rootFrequencies=rf, nSites=1)
X.clamp(disc)

# include proposals for the discrete character history
moves.append( mvCharacterHistory(ctmc=X, qmap_site=Q, graph="node",   proposal="rejection", weight=200.0) )
moves.append( mvCharacterHistory(ctmc=X, qmap_site=Q, graph="branch", proposal="rejection", weight=100.0) )

char_hist := X.characterHistories()

##########################
# Specify the rate model #
##########################


vy <- cont.var(characterCont)

for (i in 1:num_disc_states){
  sigma2[i] ~ dnLognormal(ln(vy), 0.587405)
  moves.append(mvScale(sigma2[i], weight = 1.0) )
  avmvn_cont.addVariable(sigma2[i])
}

moves.append( avmvn_cont )

# compute the state-dependent branch rates
for(i in 1:nbranches) {
  branch_rates[i] := sum(X.relativeTimeInStates(i,1) * sigma2)
}

##########################
# Specify the BM process #
##########################

Y ~ dnPhyloBrownianREML(tree, branchRates=branch_rates^0.5)
Y.clamp(cont)



#############
# The Model #
#############

mymodel = model(Y)

### set up the monitors that will output parameter values to file and screen
monitors.append( mnModel(filename="output/3b_MuSSCRat.log", printgen=10) )
#monitors.append( mnScreen(printgen=1000, sigma2s) )


################
# The Analysis #
################

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves, nruns=2, combine="mixed")


### run the MCMC ###
mymcmc.burnin(generations=5000, tuningInterval=200)
mymcmc.run(generations=100000, tuningInterval=200)



## quit ##
q()
